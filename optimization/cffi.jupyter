nbformat 4
nbformat_minor 2
markdown
    these are just some random experiments ...
code 1
    from cffi import FFI
    ffi = FFI()
  metadata
    {
     "collapsed": false
    }
code 2
    ffi.cdef("""
    typedef void mytype;
    """)
  metadata
    {
     "collapsed": false
    }
code 3
    ptrptr = ffi.new("mytype**")
    ptrptr
  execute_result
  - text/plain
    <cdata 'void * *' owning 8 bytes>
  metadata
    {
     "collapsed": false
    }
code 4
    type(ptrptr)
  execute_result
  - text/plain
    _cffi_backend.CDataOwn
  metadata
    {
     "collapsed": false
    }
code 5
    ptrptr[0]
  execute_result
  - text/plain
    <cdata 'void *' NULL>
  metadata
    {
     "collapsed": false
    }
code 6
    ptrptr[0] += 1
    ptrptr[0]
  execute_result
  - text/plain
    <cdata 'void *' 0x1>
  metadata
    {
     "collapsed": false
    }
code 7
    ptr = ptrptr[0]
    ptr
  execute_result
  - text/plain
    <cdata 'void *' 0x1>
  metadata
    {
     "collapsed": false
    }
code 8
    type(ptr)
  execute_result
  - text/plain
    _cffi_backend.CData
  metadata
    {
     "collapsed": false
    }
markdown
    `ptr` is a separate, non-owning cdata object. It is not pointing to the original data.
code 9
    ptr += 1
    ptr
  execute_result
  - text/plain
    <cdata 'void *' 0x2>
  metadata
    {
     "collapsed": false
    }
code 10
    ptrptr[0]
  execute_result
  - text/plain
    <cdata 'void *' 0x1>
  metadata
    {
     "collapsed": false
    }
code 11
    del ptrptr
  metadata
    {
     "collapsed": false
    }
code 12
    ptr
  execute_result
  - text/plain
    <cdata 'void *' 0x2>
  metadata
    {
     "collapsed": false
    }
code 12
    
  metadata
    {
     "collapsed": false
    }
metadata
    {
     "orig_nbformat": 3,
     "orig_nbformat_minor": 0
    }
