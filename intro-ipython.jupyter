nbformat 4
nbformat_minor 2
markdown
    # A Short Introduction to IPython
markdown
    [back to main page](index.ipynb)
markdown
    interactive ...
    
      - classic console
      - qtconsole
      - notebook
    
    Start like this:
    
        ipython3
    
    or
    
        ipython3 qtconsole
    
    or
    
        ipython3 notebook
    
    http://ipython.org/notebook.html
    
    http://nbviewer.ipython.org/
    
    http://nbdiff.org/
code 1
    ?
  metadata
    {
     "collapsed": false
    }
code 1
    # magic functions
    %quickref
  metadata
    {
     "collapsed": false
    }
markdown
    Text can be written in [Markdown](http://daringfireball.net/projects/markdown/).
    
    Support for $\LaTeX$ equations: $a^2+b^2=c^2$ (using [MathJax](http://www.mathjax.org/)).
markdown
    `qtconsole` can also be started from a running notebook session:
code 2
    %qtconsole
  metadata
    {
     "collapsed": false
    }
code 3
    help?
  metadata
    {
     "collapsed": false
    }
code 4
    help??
  metadata
    {
     "collapsed": false
    }
code 5
    %pylab inline
  stream stdout
    Populating the interactive namespace from numpy and matplotlib
  metadata
    {
     "collapsed": false
    }
code 6
    # TODO: TikZ backend?
  metadata
    {
     "collapsed": false
    }
code 7
    %timeit?
    
    # or:
    #%run -t
  metadata
    {
     "collapsed": false
    }
code 8
    %debug?
    
    # or:
    #%run -d
  metadata
    {
     "collapsed": true
    }
code 9
    %who?
  metadata
    {
     "collapsed": false
    }
markdown
    You can also do crazy things like running shell commands. You can even pass Python names and use the shell output again in Python:
code 10
    extension = 'ipynb'
    a =! ls *.$extension
    a
  execute_result
  - text/plain
    ['intro-ipython.ipynb',
     'intro-numpy.ipynb',
     'intro-python.ipynb',
     'simple-signals.ipynb']
  metadata
    {
     "collapsed": false
    }
code 11
    d =! ddate
    print(d.n)
  stream stdout
    Today is Prickle-Prickle, the 11th day of Discord in the YOLD 3180
  metadata
    {
     "collapsed": false
    }
code 12
    %%bash
    tmp=$(tempfile).txt
    echo some text > $tmp
    echo more text >> $tmp
    sed -i s/text/nonsense/ $tmp
    cat $tmp
    rm $tmp
  stream stdout
    some nonsense
    more nonsense
  metadata
    {
     "collapsed": false
    }
markdown
    ... but it doesn't stop there, you can also run Ruby, Octave or R code!
    
    This is of course beyond the scope of this little tutorial, if you are interested, have a look at these commands:
    
        %%ruby
        %load_ext octavemagic
        %%octave
        %load_ext rmagic
        %%R
    
    See also [Running Scripts from IPython](http://nbviewer.ipython.org/github/ipython/ipython/blob/master/examples/notebooks/Script%20Magics.ipynb)
    
    [Example notebook using Octave](http://nbviewer.ipython.org/github/ipython/ipython/blob/master/examples/notebooks/Octave%20Magic.ipynb)
    
    [Example notebook using R](http://nbviewer.ipython.org/github/ipython/ipython/blob/master/examples/notebooks/R%20Magics.ipynb)
    
    [Example notebook using Julia](http://nbviewer.ipython.org/github/JuliaLang/IJulia.jl/blob/master/python/doc/JuliaMagic.ipynb)
markdown
    Show all available "magic" functions:
code 13
    %lsmagic
  execute_result
  - text/plain
    Available line magics:
    %alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %colors  %config  %connect_info  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %guiref  %hist  %history  %install_default_config  %install_ext  %install_profiles  %killbgscripts  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %lsmagic  %macro  %magic  %man  %matplotlib  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %run  %save  %sc  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode
    
    Available cell magics:
    %%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%latex  %%perl  %%prun  %%pypy  %%python  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile
    
    Automagic is ON, % prefix IS NOT needed for line magics.
  - application/json
    {
     "cell": {
      "!": "OSMagics",
      "HTML": "Other",
      "SVG": "Other",
      "bash": "Other",
      "capture": "ExecutionMagics",
      "debug": "ExecutionMagics",
      "file": "Other",
      "html": "DisplayMagics",
      "javascript": "DisplayMagics",
      "latex": "DisplayMagics",
      "perl": "Other",
      "prun": "ExecutionMagics",
      "pypy": "Other",
      "python": "Other",
      "python3": "Other",
      "ruby": "Other",
      "script": "ScriptMagics",
      "sh": "Other",
      "svg": "DisplayMagics",
      "sx": "OSMagics",
      "system": "OSMagics",
      "time": "ExecutionMagics",
      "timeit": "ExecutionMagics",
      "writefile": "OSMagics"
     },
     "line": {
      "alias": "OSMagics",
      "alias_magic": "BasicMagics",
      "autocall": "AutoMagics",
      "automagic": "AutoMagics",
      "autosave": "KernelMagics",
      "bookmark": "OSMagics",
      "cd": "OSMagics",
      "clear": "KernelMagics",
      "colors": "BasicMagics",
      "config": "ConfigMagics",
      "connect_info": "KernelMagics",
      "debug": "ExecutionMagics",
      "dhist": "OSMagics",
      "dirs": "OSMagics",
      "doctest_mode": "KernelMagics",
      "ed": "Other",
      "edit": "KernelMagics",
      "env": "OSMagics",
      "gui": "BasicMagics",
      "guiref": "Other",
      "hist": "Other",
      "history": "HistoryMagics",
      "install_default_config": "DeprecatedMagics",
      "install_ext": "ExtensionMagics",
      "install_profiles": "DeprecatedMagics",
      "killbgscripts": "ScriptMagics",
      "less": "KernelMagics",
      "load": "CodeMagics",
      "load_ext": "ExtensionMagics",
      "loadpy": "CodeMagics",
      "logoff": "LoggingMagics",
      "logon": "LoggingMagics",
      "logstart": "LoggingMagics",
      "logstate": "LoggingMagics",
      "logstop": "LoggingMagics",
      "lsmagic": "BasicMagics",
      "macro": "ExecutionMagics",
      "magic": "BasicMagics",
      "man": "KernelMagics",
      "matplotlib": "PylabMagics",
      "more": "KernelMagics",
      "notebook": "BasicMagics",
      "page": "BasicMagics",
      "pastebin": "CodeMagics",
      "pdb": "ExecutionMagics",
      "pdef": "NamespaceMagics",
      "pdoc": "NamespaceMagics",
      "pfile": "NamespaceMagics",
      "pinfo": "NamespaceMagics",
      "pinfo2": "NamespaceMagics",
      "popd": "OSMagics",
      "pprint": "BasicMagics",
      "precision": "BasicMagics",
      "profile": "BasicMagics",
      "prun": "ExecutionMagics",
      "psearch": "NamespaceMagics",
      "psource": "NamespaceMagics",
      "pushd": "OSMagics",
      "pwd": "OSMagics",
      "pycat": "OSMagics",
      "pylab": "PylabMagics",
      "qtconsole": "KernelMagics",
      "quickref": "BasicMagics",
      "recall": "HistoryMagics",
      "rehashx": "OSMagics",
      "reload_ext": "ExtensionMagics",
      "rep": "Other",
      "rerun": "HistoryMagics",
      "reset": "NamespaceMagics",
      "reset_selective": "NamespaceMagics",
      "run": "ExecutionMagics",
      "save": "CodeMagics",
      "sc": "OSMagics",
      "store": "StoreMagics",
      "sx": "OSMagics",
      "system": "OSMagics",
      "tb": "ExecutionMagics",
      "time": "ExecutionMagics",
      "timeit": "ExecutionMagics",
      "unalias": "OSMagics",
      "unload_ext": "ExtensionMagics",
      "who": "NamespaceMagics",
      "who_ls": "NamespaceMagics",
      "whos": "NamespaceMagics",
      "xdel": "NamespaceMagics",
      "xmode": "BasicMagics"
     }
    }
  metadata
    {
     "collapsed": false
    }
markdown
    IPython can display [all kinds of media](http://nbviewer.ipython.org/github/ipython/ipython/blob/master/examples/notebooks/Part%205%20-%20Rich%20Display%20System.ipynb) and it can even handle the [HTML5 `<audio>` tag](http://nbviewer.ipython.org/github/Carreau/posts/blob/master/07-the-sound-of-hydrogen.ipynb).
markdown
    ## Links
markdown
    http://nbviewer.ipython.org/github/rasbt/python_reference/blob/master/tutorials/awesome_things_ipynb.ipynb
metadata
    {
     "orig_nbformat": 3,
     "orig_nbformat_minor": 0
    }
