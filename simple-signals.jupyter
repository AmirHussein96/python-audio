nbformat 4
nbformat_minor 0
markdown
    # Generating Simple Audio Signals
    
    [back to main page](index.ipynb)
markdown
    We create a simple sine wave as an introductory example using Python and NumPy.
    
    Let's start with some basic Python. We create three numbers and give each of them a name.
    
    > Sometimes these are called *variables*, but that is actually misleading.
    > Think about objects and names. An object is created (in our case a number) and we specify a name by which we want to access this object.
code 1
    dur = 1.5  # duration in seconds
    amp = 0.3  # amplitude (full scale: +-1.0)
    freq = 440.  # frequency in Hertz
    fs = 44100  # sampling frequency in Hertz
  metadata
    {
     "collapsed": false
    }
markdown
    Everything following a `#` sign is a comment.
    
    There is no output. If you want to see which object a certain name refers to, just type the name:
code 2
    dur
  execute_result
  - text/plain
    1.5
  metadata
    {
     "collapsed": false
    }
markdown
    In Python, *everything* is an object. And every object has a *type*. Let's see ...
code 3
    type(dur), type(amp), type(freq), type(fs)
  execute_result
  - text/plain
    (float, float, float, int)
  metadata
    {
     "collapsed": false
    }
markdown
    Note that we didn't specify any types explicitly, we just got Python's default types. Numbers with a comma are by default of type `float`, numbers without comma are of type `int`.
    
    There are many more types in Python (strings, tuples, lists, dictionaries, ...), but let's ignore them for now.
    
    If you want an overview about all the objects you have defined up to now, use `%who` or its more verbose cousin `%whos`.
code 4
    %whos
  stream stdout
    Variable   Type     Data/Info
    -----------------------------
    amp        float    0.3
    dur        float    1.5
    freq       float    440.0
    fs         int      44100
  metadata
    {
     "collapsed": false
    }
markdown
    Now, let's bring NumPy into the game. The canonical way to do that is
code 5
    import numpy as np
  metadata
    {
     "collapsed": false
    }
markdown
    With this, we'll have to prepend "`np.`" to all NumPy functions, types etc.
    
    Now let's create the most basic signal, a sine. This is kind of the "Hello, world!" of signals.
    
    In order to create a sine tone, we need first a series of time instances to represent our sampling times. The distance between those instances is the *sampling interval* $\tau = \frac{1}{f_s}$, where $f_s$ is the *sampling frequency*.
    
    To create a series of regularly ascending (or descending) values, NumPy provides the function `arange()`. Let's use that.
code 6
    t = np.arange(0, np.ceil(dur * fs)) / fs
    t
  execute_result
  - text/plain
    array([  0.00000000e+00,   2.26757370e-05,   4.53514739e-05, ...,
             1.49993197e+00,   1.49995465e+00,   1.49997732e+00])
  metadata
    {
     "collapsed": false
    }
markdown
    As you can see, this creates an array of numbers from 0 to just below the value specified in `dur`. These are a lot of numbers, so to avoid flooding us with heaps of useless output, IPython just shows the first and last few values. Very handy.
    
    > Note that in Python 2 and before, the division operator works a little differently then in Python 3. Here we assume we're using the latter, where the division of two `int`s returns a `float` value (and not an `int` with the truncated result!).
    > To make sure this also works as expected in Python 2, you can convert one operand to `float` before the division or use a special `import` statement:
    >
    > ```python
    > 1. / fs
    > ```
    >
    > or
    >
    > ```python
    > 1 / float(fs)
    > ```
    >
    > or
    >
    > ```python
    > from __future__ import division
    > 1 / fs
    > ```
    
    If you want to get help about `np.arange()` (or any other function/object), just write its name followed (or preceded) by a question mark:
code 7
    np.arange?
  metadata
    {
     "collapsed": true
    }
markdown
    This will open a help screen at the bottom of your browser window with an explanation of all parameters and with a few usage examples.
    
    Now let's check the type of `t`.
code 8
    type(t)
  execute_result
  - text/plain
    numpy.ndarray
  metadata
    {
     "collapsed": false
    }
markdown
    The `ndarray` is the single most important type of NumPy. It can handle arrays with an arbitrary number of dimensions. All values stored in an `ndarray` have the same data type. This makes most operations on them faster then on Python's built-in `list`s.
    
    Let's get some information about our brand new array named `t`.
code 9
    len(t), t.dtype, t.ndim
  execute_result
  - text/plain
    (66150, dtype('float64'), 1)
  metadata
    {
     "collapsed": false
    }
markdown
    By default, NumPy stores floating point numbers as `float64`, i.e. each number using 64 bits. This is sometimes called *double precision*. If you want *single precision*, you can use `float32`. The length of our array can be obtained with the built-in `len()` function and `t.ndim` shows how many dimensions the array has. This one has only one. Boring.
    
    Now that we have our time instances, we can compute the sine for each of them, according to the equation
    
    $$x(t) = A\sin(\omega t),$$
    
    where $A$ is the amplitude, $\omega = 2\pi f$ and $f$ is the desired frequency of the resulting sine tone.
code 10
    sig = amp * np.sin(2 * np.pi * freq * t)
    sig
  execute_result
  - text/plain
    array([ 0.        ,  0.0187945 ,  0.03751516, ..., -0.05608843,
           -0.03751516, -0.0187945 ])
  metadata
    {
     "collapsed": false
    }
markdown
    Note that we didn't have to explicitly loop over the array elements. Most NumPy functions - including `np.sin()` - work element-wise. If an array is multiplied by a scalar, the multiplication is also applied element-wise.
    
    > This is called "broadcasting", but more about that later ...
    
    To check if this actually worked, we plot the signal, but first we'll set up inline plotting.
code 11
    %matplotlib inline
    import matplotlib.pyplot as plt
  metadata
    {
     "collapsed": false
    }
code 12
    plt.plot(sig)
    plt.ylim(-1.1, 1.1);
  display_data
  - image/png
    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
    
  - text/plain
    <matplotlib.figure.Figure at 0x7f5ae3488a90>
  metadata
    {
     "collapsed": false
    }
markdown
    Hmmm ... maybe we recognize something if we only plot the first 200 values.
code 13
    plt.plot(sig[:200])
    plt.xlabel("time / samples")
    plt.ylim(-1.1, 1.1);
  display_data
  - image/png
    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
    AABJRU5ErkJggg==
    
  - text/plain
    <matplotlib.figure.Figure at 0x7f5ae11c4dd8>
  metadata
    {
     "collapsed": false
    }
markdown
    Better.
    
    If we want to show the time in milliseconds instead of samples, we have to specify the time instances:
code 14
    plt.plot(t[:200] * 1000, sig[:200])
    plt.title("sine tone")
    plt.xlabel("time / milliseconds")
    plt.ylim(-1.1, 1.1);
  display_data
  - image/png
    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
    
  - text/plain
    <matplotlib.figure.Figure at 0x7f5ae1024748>
  metadata
    {
     "collapsed": false
    }
markdown
    Now that we can *see* our signal, wouldn't it also be nice to hear it?
    
    There are several 3rd-party libraries for Python that allow audio playback, let's try one of them: [python-sounddevice](http://python-sounddevice.rtfd.org/).
    
    Follow the [installation instructions](http://python-sounddevice.rtfd.org/#Installation), then re-evaluate this notebook (with the menu command "Cell" $\to$ "Run All Above") and continue here:
code 15
    import sounddevice as sd
  metadata
    {
     "collapsed": true
    }
code 16
    sd.play(sig, fs)
  metadata
    {
     "collapsed": true
    }
code 17
    # TODO: save WAV file, link to sudio-file-notebook?
  metadata
    {
     "collapsed": false
    }
markdown
    OK, now we know how to create a *mono* signal, but what about *stereo*?
    
    For now, we were using one-dimensional arrays, but for stereo signals we need two-dimensional arrays.
    The 2 channels can be either stored as rows or as columns of such a two-dimensional array.
    Both ways are possible, but it's more common to store the channels as columns.
    
    Let's create two sine signals with different frequencies, one on the left channel and one on the right.
    
    There are several possibilities:
    
    1. Create two separate mono signals like above, and combine them with numpy.column_stack()
    
    1. Duplicate the time array `t` and the array with the two frequencies with numpy.tile() and use those larger two-dimensional arrays in the calculations (this is not recommended)
    
    1. Use *broadcasting* and do everything at once
    
    1. For sure, there are more ways to do this ...
    
    In this case, let's use *broadcasting*!
    
    This means that we use arrays of different (but compatible) shapes in our calculations and the singular dimensions are internally repeated.
    This sounds complicated, let's just see it in an example.
    
    Remember our time array `t`?
code 18
    t
  execute_result
  - text/plain
    array([  0.00000000e+00,   2.26757370e-05,   4.53514739e-05, ...,
             1.49993197e+00,   1.49995465e+00,   1.49997732e+00])
  metadata
    {
     "collapsed": false
    }
markdown
    This array is one-dimensional (note that there is only one pair of brackets).
    
    But we can re-shape it into a two-dimensional array with one column.
    We can specify the concrete shape, or we can set one component to `-1`, which means this dimension is determined automatically, based on the given data.
code 19
    t.reshape(-1, 1)
  execute_result
  - text/plain
    array([[  0.00000000e+00],
           [  2.26757370e-05],
           [  4.53514739e-05],
           ..., 
           [  1.49993197e+00],
           [  1.49995465e+00],
           [  1.49997732e+00]])
  metadata
    {
     "collapsed": false
    }
markdown
    The result is two-dimensional (note the two levels of brackets!).
    
    Let's now create an array for our two frequencies.
code 20
    freq = np.array([500, 600])
    freq
  execute_result
  - text/plain
    array([500, 600])
  metadata
    {
     "collapsed": false
    }
markdown
    As you can see, this two-element array is one-dimensional.
    
    The interesting part comes when we multiply those two arrays:
code 21
    freq * t.reshape(-1, 1)
  execute_result
  - text/plain
    array([[  0.00000000e+00,   0.00000000e+00],
           [  1.13378685e-02,   1.36054422e-02],
           [  2.26757370e-02,   2.72108844e-02],
           ..., 
           [  7.49965986e+02,   8.99959184e+02],
           [  7.49977324e+02,   8.99972789e+02],
           [  7.49988662e+02,   8.99986395e+02]])
  metadata
    {
     "collapsed": false
    }
markdown
    Wow, the result is a two-dimensional array with two columns!
    The left column holds the time array element-wise multiplied with the left frequency, the right column used the right frequency value for multiplication.
    
    Isn't this great?
    Now we can use this for creating our *stereo* sine signal:
code 22
    sig = amp * np.sin(2 * np.pi * freq * t.reshape(-1, 1))
    sig
  execute_result
  - text/plain
    array([[ 0.        ,  0.        ],
           [ 0.02135331,  0.02561443],
           [ 0.0425983 ,  0.05104179],
           ..., 
           [-0.0636272 , -0.07609638],
           [-0.0425983 , -0.05104179],
           [-0.02135331, -0.02561443]])
  metadata
    {
     "collapsed": false
    }
markdown
    Again, we have an array with two columns, one for each channel.
    
    The plt.plot() function can handle two-dimensional arrays and just plots each column with a new color.
code 23
    plt.plot(sig[:200])
    plt.ylim(-1.1, 1.1);
  display_data
  - image/png
    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
    
  - text/plain
    <matplotlib.figure.Figure at 0x7f5ae0af3240>
  metadata
    {
     "collapsed": false
    }
markdown
    Of course we can again plot the time in milliseconds.
    And let's add a legend in order to distinguish the two signals!
code 24
    plt.plot(t[:200] * 1000, sig[:200])
    plt.title("stereo sine")
    plt.xlabel("time / milliseconds")
    plt.legend(["left", "right"])
    plt.ylim(-1.1, 1.1);
  display_data
  - image/png
    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
    SRJDhw6lX79+bL755iy88MKss846PPHEE7Ns02iBBRbgmGOOYb311qNr166zbFdNZdejT4rXo3fO
    xTyQdhg1SVKTZYqLyZ1+Re+ccxnnid455zLOE71zzmWcJ3rnnMs4T/TOOZdxnuidcy7jPNE751zG
    eaJ3zrmM80TvnHNt8Jvf/GZmGeLWFLsMYaV4onfOuTZ4/vnn2WCDDYratqVlCMeNG0fPnj2TDG0O
    nuidc65E06dPTzuEkniid865IvTq1Yvhw4fTu3dvFlpoIXr27DmzOea7775j9913Z5FFFmHllVdm
    +PDhc1ylT5w4kd69e9OlSxf69+/PDz/8wDfffMMWW2zB5MmT6dSpEwsvvDAfffRR4rF7onfOuSKN
    GjWKu+++mylTpjD33HPPbI7J5/O8++67vPXWW9x3332MHDlylqYaM2P06NGMHTuWt956i+eee46r
    rrqKBRdckHvuuYfu3bszdepUvvrqK5ZaaqnE4/aFR5xzdUX5ZIrcWq60KpmSOPDAA1l66aXneG70
    6NFcfPHFdO7cmc6dOzN06FAaGhrmeG1jEt96662ZNGlSiKMK1To90Tvn6kqpCTpJzXWaTp48eZbn
    evToMcc2hVfqHTt2ZPLkyckH2AxvunHOuSI1N3KmW7duvPfeezN/Lvy+rftMkid655wr04477sgp
    p5zClClT+OCDDzj//POLTuBLLrkkn332GV999VXF4vNE75xzZTr++OPp0aMHyy67LJtvvjk77LAD
    8847b7PbF46r/9WvfsWAAQNYbrnlWGSRRSoy6saXEnTO1YysLCV40UUXceONN/Lggw8mtk9fStA5
    51L00Ucf8cgjjzBjxgxeeeUVzjrrLLbddtu0w5rJR90451yZfvzxR/bZZx/eeustunTpwoABA9hv
    v/3SDmsmb7pxztWMrDTdVII33TjnnGuWJ3rnnMs4T/TOOZdx3hnrnKsp1Zgp2t54onfO1QwfkFEZ
    3nTjnHMZ54neOecyzhO9c85lnCd655zLOE/0zjmXcZ7onXMu4zzRO+dcxpWd6CX1lfSypNckHdnE
    830kfSlpYvw6ttxjOuecK15ZE6YkzQWcD2wKfAA8KWmMmb0026YPmVm/co7lnHOubcq9ol8TeN3M
    3jazacAoYJsmtvPZbs45l5JyE/3SQOFy5+/HxwoZsI6kSZLulrRymcd0zjlXgnJr3RSzQsAzwDJm
    9q2kLYDbgJWa2lBSQ8GP48xsXJnxOedcpkjqA/Qp6TXlrOYiaW2gwcz6xp+PAmaY2WktvOYtYHUz
    +3y2x32FKeecK1E1Vph6ClhRUi9J8wI7AWNmC2JJxbqjktYknFw+n3NXzjnnKqGsphszmy5pf2As
    MBdwuZm9JGlwfP4SYHtgX0nTgW+B/mXG7JxzrgS+OLhzztUxXxzcOeecJ3rnnMs6T/TOOZdxnuid
    cy7jPNE751zGeaJ3zrmM80TvnHMZ54neOecyzhO9c85lnCd655zLOE/0zjmXcZ7onXMu4zzRO+dc
    xnmid865jPNE75xzGVfumrF1QXnNB/yRsM7iCkBnfppnGp+sPI1Xtp7GhAOMb5foBMwDTAXeBv4L
    PGTG2+lE7RopryWBrYDVCYvPzw98CrwIjAMet5zNSORYYmHC52Q1wmdl0fhU4+diEjDejPeTOF7W
    Ka8OwBrApsCvgMWBacB7wETgLsvZh+lFWByJRQifi9WBXvz8uTjDjPtTCqtomV54RHktAhwG7A28
    gXEfL+w0L6//aX2mLbga3Z/6iOXHzmDxl7rz+fKP8NghN/LMoK8Iv8jVCL/YD4FrgCvMmJJkfK5l
    ymsd4GhgfcIqZo8D7wA/EBJGb2BzYAHgPOAiy9n3JR9HzAX0A/YCNozHeQJ4lXBCmQF0BpYlJK0N
    gTeAq4Brzfi6rf/HrIoXV4OBA4DpwL8IF0//I1xg/gJYG+hLeL9Ps5w9lE60TZOYF9iOkD/+APwH
    eBJ4HfgMMOA5Mz5ILUiKy52ZTPTKS8A+wDDgFn6a50xO+HEl4GTCL+c84KbGxK28FgX2BYYC1wLH
    Wc6+iQngj8DfCB/I8wln8K+SiNM1TXktBZwNrEv4nV1jOfuumW1F+CM8mnBy3tdydldRxxEirHOc
    B74ALgRuNuObVl43D7AxIZGtD5wJnGfGt8UcN+uUV1/gAuAlwu/vMcs1nWiU1/zALoTf30TgQMtZ
    yomTuYA9gGOBN4GLgTvMaPIzmLZ2meiV12LASGARYA8a7BvCL2oZ4EjgTjOa+9AtAZxFuD3byXL2
    3M/x0Ytw4tgEOIhwoqiNNy9DlNfmhDuoq4BhlrOik6fy2gi4HLgXGGo5+6HZbcWvgUuBjsARwL/b
    8vuM+zmBcJIZYsa/St1HViiveQl/P1sDgyxn95bw2o7AUYSLqkGWszsqE2UrcYhVCZ+hr4EjzXgs
    jThK0e4SvfJaBbgDGA0cS4NtD4wAzgDOMmNakfvZhfCB3Wv2D5zEeoQE8TSwT2tXf654yutgQlPb
    QMvZuDbuoxNwJdAD6Gc5+98sz4er+P2BHHA8cLEZZbfvS2wO/AO4DTjCjB/L3Wc9iRdYtxDujHa3
    nLWpmVN5rQeMItx1n97cnUDSJDoQ7uiPBg4lNMnVRnJsRbtK9MprTUKSP4wGu4FwO70FsJ0Zz7Zx
    f7cSmnGumDVWFgAuIlz5b2/Gy22N281sfhkObAlsYTl7N4H9DSM0y2xmOXsHZv7eLgF+B/yfGW+U
    Ffjsxw0ddlcC3YCdzHgryf3XKuW1NHAf4e/vqHI7xpVXj7iv8cBBlU72EosRmmy7Ajub8WYlj5e0
    dpPolddahA/GnjTYBOB24BNg93I6UJXXSsADhCaES2eNFxE6704B9jDjzrYepz2LSflMYANCUv4i
    wX0PJVylbUiDdSBcbb8IDKpUe3r8XBwE/J1wMnmkEsepFcqrOyEhX2Y5OzXB/XYB7gGeAYZUKtlL
    LE/oKL4dOLrYu/5aUkzurPtx9MrrN4Rf0h402LOED92DwLbljpKxnL0KbATkldfWszxnmBmXAX8G
    LpMYWM6x2rHjCaObEk3yAJazc4HzmT7veBb8+BFC380ulew0jZ+Ls4HdgdsktqrUsdIWBzHcC1ye
    ZJIHiE0/mwNrETpFEyexBvAwcLYZh9djki9WXSf62Hl6J3AoDfYq4Zd2uRnHJNHuCmA5ex34C3CF
    8lpjjueNCYQO2lMlhiRxzPZCee0N7EZorkk0yc/UYA/w5L6L8bc1vqZB51Wr3dWMewgXAZdL7FaN
    Y1aT8poHuIkw7DXRJN/IcvYV4T3cK/abJUZiY8KV/H5mXJTkvmtR3Sb62MN/EzCSBnuKMHHmJDPO
    SPpYlrMngEHA7cqr1xzPGy8Qmh4Okjgk6eNnkfJqHDq5heXs44ocQ/wBuJcHTtmbzu+/Cpwfm4qq
    Il4EbAScLLFrtY5bJWcB3wJHVLINPU6m2go4K46qKpvE+sANhP6125LYZ62r20QPnANM4dTPLyXc
    Ph5rxqWtvKbNLGe3AacDY+JQsFmfDx1vGwMHSuxZqTiyII6TvxHYIzaPJX+MMOzxDmCQTet4AzAQ
    WAc4sBLHa44ZLxGaIE6X2Laax66UeCe2GbCz5eynSh/PcvYC0B8Y1dSFVikk1iSMDtrZjJqaoFVJ
    dZnoldcgoA93XjCU77uOBUaYcWUVDn0u8AJhMs8czHiP8Ed9osR2VYin7sRb/hsI7bpFTWwq+Rii
    J6Ej7wgzxgBYzqYSxncfpbz+WInjNseMFwlXpZdIbFbNYyctzlY+GdjGcvZltY5rOfs34ULr+vgZ
    KpnEbwkn/73MuC/J+Gpd3SV65bUycAofrDGQp/YbTZjJeGY1jh1vUQcDmyqvHZvcxniV8Ed9UWwH
    dLM6mXDLP6wSO5do7CA814xrCp+znL1NmM4+Unl1rcTxm2PG04Tp9NfFSTl1R3l1Bq4jTGh6JYUQ
    zgI+B04s9YUS3YG7gIPMSGUyVprqanhlrJ8xgRlzXciw6VsS6k3sXe2JDcprdUJHzjqWsybHYkv0
    IVy5/jEm/3ZPeW1MmPXa23L2WeL7D7VJ7gceN+OIFuI4D1gC6F+tCTkzjy22J9wRrmXG5Goeu1zK
    61rgG8vZPinGsBihVMIgy9k9Rb1GLEgYjXeLGSdVMr40ZHF45YnA2wz7cVnC5IZ905i9Zjl7GjiJ
    cBvZZAVQM8YBxwB3SFT16rEWxavBKwmzjSuR5EWor/IZYQx7S44AVgb+mnQcrTHjJsJkuzFxAldd
    UF79gTUJs0ZTYzn7lNDfcmUcddeiWLfmOuA5wt1ku1Q3iT5eDe7Mxc+MhQ47Ema8pjnNfAShdG2z
    H/w4zv4uYHQshNWenUsoSTu2Qvs/gDDmetfWhtbGAmkDgOHKa/kKxdOSUwgTt66JU+9rmvJahvB5
    39lylnrJD8vZeMKd4flFbH4SsDAwuF5KGlRCzX/IAJTXQsAVPL/TqXy0ah7oZ8anacYUb/n3Ag5X
    Xr9uYdPDgR8JHUntkvLaFliP8F4kv//QwXkU4XNRVMlgy9nzhLIL/6jmkEsIk6oIw3WXJhTaq1nx
    vbkUODfeydaKHPBb5bV9cxvEARH9gR3aW+2h2dVFogdOYlrHR7lp1CGEQmIvpB0QzOzcO45wGzlX
    k9sYPxFuNbeWaLIDN8vimgAXEgpdJX41GEfYXAv0b8MiMWcT6sxXfTisGT8AOwAHSGxa7eOXYFdC
    f8bwtAMpFNcd2BM4L7bbzyIOr72YcOef6kVhLaj5RK+81sbYkRGvdQVuM+OWtGOazSWEUSTNTpQy
    4wtge+CC+AFsT04HbrKcPZr0jmPn642EyqQlj4m2nE0n1iuKNVuqKq5StQswMp6wakpsAz8d2Nty
    VnPlASxnjwH/ZLYmHIlOhLHyR8bRTu1eTSf6OPv1Mh454gGmLt2VGrzNjZX69gaObGkyhxkTCZ2E
    N0ssVJ3o0qW8+hDmFRxToUMMJ6xY1ObZ0JazZwlXfhdWuwkHwIx/E+4sboonrlpyDmHRl1pOlscB
    ayivLQoeuxh42IwrmnlNu1PTiR44kq+X/JL7T9kM2LFW29ksZ28Sxvie2+J2xuWEZdMurEZcaYor
    B10CHBBrliS7/zBMsR/w1wTqGp0ErESoaZSG4cBHMY6aoLy2JHRu59KOpSWxY31/QnmLjhK7AL8n
    VC11Uc0meuW1HKaDuezRZaHDnmaUVaO8Cs4EfqW8+rWy3QHAH+IHMsuOAl6IpSMSJbEM4WS5Y2wW
    K0tciWoIcLbyWrDc/ZV8/NA5uyfQX6JvtY8/u3iSPp+wLGPNL48Yx9NPZErPUwkXXANqddm/tNRs
    osc4m8cP+pQpy11tRkWmyiepIFmcq7yaHR8dV6TqD5wda2FnjvJagfBeJF5XJo6LvhY404ynktqv
    5exB4FHCCkNVZ8ZnhI7PKySWSiOGAocDE0tZCjB1Xy19GPN/tR/L3/MPM55r/QXtS00meuW1Jd93
    XZcHTvqc0AZXFyxn9xOaZlpMFnHFqxOA62uwXTYJ5wDDLWfvV2DfRwAzKKNdvgWHAYPjgjNVFyfZ
    XQZcndb4+tjPdBAtDC6oSWe9vwdPDX6TXbZYI42+llpXc4leec3H9Pku4tar5mF6x4FmTE87phId
    CuyjvH7ZynbnEToST6h8SNWjvLYCViQk+2T3HcoOHwzsFoetJspyNpkwe/K8FJPFMGBB0ku0ZxLG
    zL+T0vFLFssO/41nd90U0QO8oODsai7RM23+I3lngy682u+gpNf0rIaYLE4ELmgpWcR22T2AgXFh
    6boX23bPBYZazhLtOI8jlf4J7B+rhFbKeYSJTP9XwWM0K17YDAQOjye2qlFemwGrUkeT+yS6EJry
    Btn/fvMesB+hr6VTupHVlppK9MprGWyuo7j39P8AV6cdTxnOBxaHlidImYV1bYErJRavRmAVdgih
    A7aoYlMlOht41IwbK7DvmeJ48dQ6ZgHMeCfGcF21huLGocwjCItx10VHZqxvdCFwd+OazbE8wr8J
    S1S6qOxEL6mvpJclvSapyXHukkbE55+V1HyJ1inLjGTC/j/yce9d67kuRZyIMwQ4I5ZvaH5b4wHC
    WqaXxw9uXVJePQnNVgcnvu+wYMfGVGnREMvZQ4Rqh6n1D8XiZ+OpQBNYMw4E3oK6KuE7EOhN6Fsp
    dCSwRyulSdqVshK9pLkIV699CdUAB0izvrmStgRWMLMVgb9BC+szytbl6cE7mvF5OXHVAsvZf2Bm
    BcvWHEdoLhhcyZgq7HTgwjinIDGxjvjFhEW9Ex+P34LDgb3T6piNhgIbVnoRG+XVjTCZ76Bql21u
    K4nlaGYopeXsI0Lz6QjvmA3KvaJfE3jdzN42s2nAKGCb2bbpR2yGMbMJQBdJSza5twkH3m5fLFup
    6oZpOAIY1FqyiBPBBgIn1GOJhDgDdh1CVcbk9htGnlwNXGDGY0nuuzVxrdJTCcNlU0kWsUDbQOBC
    hU7GShkOXFqpZR2TJjE34S745BaGUl4AdINsLN9YrnIT/dIwS8fY+/Gx1rZp+kP78jYDyoynpsRk
    cQpFJAszXiZc/V8nMV814ktCrMc/Aji0ApNrDgIWIL064iOAXoQlCFNhxhMxjqsqMeQyLqvYhxqa
    lVuE4wglwkc0t0HsazmAsKh43dT9r5RyPzjF3ubNnuSaft3nKx0tqSF+9SknsBoyAvgFxSWLS4F3
    qK8hl/sCnwA3J7lTid8TZtfuktYQ2zhy6EDgnDiiKC2nAvORcP9HrLh6HnCY5ayo8s5pmzmUsojS
    F3ES3OO0vhBNXZHUpyBPNhTzmnIT/QcwS9W9noQr9pa26REfm4OZNRR8jSsztpoQrywak0XHFrcN
    HdB7E4ZcblKN+MqhvBYnjG44MMm23bjy0nXAwWa8ldR+28Jydh9h6bqK1NIvKoYwZ2BX4Mh4AkzK
    YOALqOxIpqTMMpTS+LDIlx0G7JfSAjMVYWbjCnNlMa8pN9E/BawoqZekeYGdgDGzbTMG2A1A0trA
    FDP7uMzj1pU4Y/ZpikgWsXb2HoRb9UUrHVuZTgZGWs6SXh9gODCJMG6+FhwKHKS8fpFWALHW/kGE
    pr2ymyLiSbqBhE/SldLUUMpixNnZZxCG57ZbZSV6M5tOqBw3lrA02g1m9pKkwZIGx23uBt6U9Dqh
    muF+ZcZcrw4FDmyplHEjM+4FRgOX1OqQS+W1BvBnQrJIbr9iq7jf/WpliG1cYGYElSm7UHwcxnXA
    MyQzoekU4DrL2X8T2Fc17ELTQymLcTah4OBWyYZUP2Q1cjIvZiXzeqe8jgVWs5y1OutSYn5gAnBu
    rdXVjm27jxGGU16V2H7FkoRmkv5mjE9qv0mIzW4vEhbheCC1OERn4FnCDOGir2xn2UdeawG3Ar+2
    nH2ZZHyVEIdSTgA2aWvBsliv/jzgN3F1qswoJnfW1MzYduAMoLfy+lNrG5rxPbAzcJrEihWPrDR7
    E9bBvSapHRYMpbyi1pI8zKx7fjChDk5qC72b8SWhvf7SeGIsSTxJXwAcWSdJfh5Cf81J5VSltJz9
    C3iBeivWlhBP9FUUrySGEiZytFq1Mq6Nmwf+GT/wqYttuycAQ+LqWkk5GFiYhJuCEnY78C5h2F5q
    zHiYUOXyyjY07Q0CviOMQ68Hw4DPaGVRnyIdDBwaZ3G3K57oq8xydifwGqFjrRgXEIYvNlQqphKd
    SmjbfTapHUqsQZi2vnMtVyuNnZZDgaOVV9o144cBixJKbRQlLqI9jHCSro022xbERdN3JQylLDve
    OGv7fFLua0mDJ/p0HAQcobxmn1w2h4LVh/aU2KDikbVAea1LKHeR2PJycSHn64EhcWRJTbOcvQJc
    QTjhpReHMY0wazYnsUqRLzuZcJKu+YU5JJYgNOXtHov/JeU0YC3ltXGC+6x5nuhTYDl7nVC/pajR
    E2Z8TGgXvzaOJa66OAP2AuDwhNt2LwDGmTE6wX1W2gnApsprvTSDMON1wp3QdbHzvlnKa03CaKaa
    XgMWZumvuToW/UtMnL2del9LtXmiT88pwHqxTkyr4nKKdxA64dIYnbQvYXLN9UntMK6b+weKb8aq
    CZazqYROvUuK6WupsCuBVwgFvpoUT9IXUScdsIRE3IXKnZRuI0zsTLWvpZo80afEcvYNIcFdUsL0
    +sOA5anyBzQ2MR0P7J9U267EyoTxzf3jOrr1ZjShrG+TpbmrJTbtDQI2k9i5mc0OBj6nDjpgJdYi
    vKcDYvNU4uJn+ABCX0uvShyj1vg4+pQpr9HAa5azohaljmOKHwe2qUZFx1iM7XbCYtGJXGHFdvkn
    gOFmXJnEPtMQR29MBNa3nL2caiyiN3A/sIEZL818PCzU/jiwZtIlpJMWF995GjjAjNsrfry8/g5s
    BPSth87p5vg4+vpwALCX8i0syFLAjDcJ7fU3VGlVqv7AsiRU3TA2O10B/KeekzyA5ew9wiiWfyiv
    VP+W4oLzfwdublyVKp6k/wGcXAdJfm5CmfOR1Ujy0ZmEleB2q9LxUuOJPmVxkYQjgCuK7RwyYwxh
    Esn1lRxfr7yWIDSv7JngGrAHA8uRnfbRC4B5gX3SDoRwAn2Mn0sa7wl0ooVyvjXkBGAGVVzVKxYc
    3AsYXgPDZSvKE31tuAb4mNLae48FptFCJ1wCRgDXWM6eTGJnEn8inNS2jzN/657l7Cfgr8CwlFej
    amyv3w/oTs9HziQMAd0rLm1ZsyR2IMwC3zlW6qway9lEwuSzi7K8GpUn+hoQ2wf3Bg6IdUhaf02Y
    WNQf2FSCSJrFAAAQzUlEQVRK/mpSeQ0Efk9CIx9i5+u1wA5plx5OWmyfzwEj0x6yZ8YPLPze9vzp
    kH15re9dtT5mPna+XgD0S3i8fCmGEZon90rp+BXnib5GxHKq+wL/VF6dinpNqHuyNZCX2CipWGLt
    7nOA/rHGS3n7E4sRhoYeHqfvZ9GFhJEtx6YdCIcssweLvvoc1925lcRqaYfTHIlfEIqr7RX7GFJh
    OfsBGACcorx+lVYcleSJvoZYzm4B/k2Ypl3ca8Kkmf7AqDjyoixxXPgo4ATL2aSy9yc6Ev6YbzQL
    awdnUbwr2xPYJ84gToXy+gNwIB2n/B8212DgTokV0oqnORILA3cCp5txR9rxWM5eonEpz7zqZinP
    Ynmirz0HE6ZoDyz2BWY8SFgX4G6JclfSOQn4kFDStSwS8wI3EZZHPKbc/dU6y9lkGkdEpdC5p7wW
    JZykh1jO3jfjFkJRvLESNdPZGBdOuRN4iHDnWCsuBd4m4UXua4GPo69ByqtxTPQWlrOnin5daKs/
    HFi/hKXWCo+7PaFzdzXL2aelvn62WOYirBDVkdD5WpHJL7VIeTUAmwCbJDhaqbVjzg3cAzxjOTti
    lufE8cD/ARvG5r7UxIXvxwAfAXu0tu5rtSmvRQhzPIZZzhIrw11JPo6+TsXKkH8Dbi2m8NnM1xkX
    E4bY3SfRrZRjxlv+i4C/JJDkOxBq+SwB7NSeknw0DJhCZUdEze50wiiso5p47gTC1fP9EotUMaZZ
    FIyVn0pol6+pJA9gOfsc6AeckWYTXNI80dcoy9mthMR7m/Iqeo1QM04iXEk/LNGrmNcor2UI9T/2
    tpw904Zwf95XaK4ZCaxEmL2biWGUpYh1+ncBNlNef6v08ZTXX4GtgJ3jcM9Z4wnDLg8CxgEPxsqQ
    VRWba24lzDkYWOPlqF8EdgduSnOd4CR5oq9tpxAKVv0z3poXxYxTCAs1jJdocRSB8upMGBFzluWs
    rBmJEgsSyiUsCPQ1Y2o5+6tnsXjYn4EG5fWXSh0nroN6GrCN5eyLZuMJyf4Iwgn9IYkelYppdvEu
    4n7CXc5fzPihWsduq7gi1RnAXbHvo655oq9hcSTHXsB8wNVxGbjiXmucRyhE9pBE36a2UV4LE9p1
    H6LMZgaJpQl/zB8D25lR9rDMemc5e40w/PUfymvLpPevvDYhVK/sF0eNtByPYWbkCJ2OEyTWTzqm
    OWIUywL/AR4h1Javp2a8s4G7gLHKK5Xy4EnxRF/j4hjf7Qg1OW4sodIlZlwFbA9cLnFcbDsHZpY3
    uJ9QlGtoOUWdJDYDniL8UexZy7fl1WY5e5qQ7K9SXtsltV/ltTWhZPT2lrMJJcVknEW4gLhZYr9K
    lb2W2I6wqPfFZhxei23yLYl/E38HHgbG1XOZBB91Uyfi2N5rgW7ADrFGTnGvDR2zo4GvgEE0qDOh
    iWUUcHxbk3xsjz+WkDR2icM8XROU12qE0SbnAme0+T0P0/SHEsplbGM5e6LNMYWhuLcRFs3e34yy
    OuEL9tuR0OyxBaEMdZtjrAXxPT8W2APYNsllNJPgo24yJF7Z9ydMqHpSeW1e9GvDUMuNYMaTrHbp
    S0zr+ATTOp5qOTuujCS/EfAMsDqwuif5lsVO7nUIv8Nb4/qtJYlD/0YREs7a5SR5ADPeANYEPgCe
    l9g7DottEwlJbA08DywCrFrvSR7Clb3l7ATgaOB+5TW43uri+BV9HYpJ/lJC2/rxlrO3i3jNqsDp
    TOu4NNfe+xnvrt8NGA5ca8a3RR033OJvShirvzzhtvamJBZubi/indmJhNK4DcDlrY21jx3xexAm
    P90AHJ1EaYpZjiFWJ9xtdCUUQxtd7IipeHLYkvB56AocbMbYJOOrFcprFUK/yDfAEUkV/CtHMbnT
    E32divVwDgeGAA8Q2mvHW84+i88L6EFYWGEXYBXCH/BFlrPpsSPuCOCPhCaFewgLVLzT2JYaE/si
    hKv2jYEdgG8JCeEaM6oyGSiL4qS404GVCXMf7gCei3duxOJovQnDJvcCXies1/t0xWIKv+/NCJ+r
    3xOGQ94DPAm833hCj9stBqwBbE7oQ/qQ8Lm4odoVKKstnnj3JjTnDLWc3ZxqPJ7osy+OBugPbEto
    GphBmJDSGfgOeJTQPn+L5WyOKzSJ7oRZk5sBqxE6fT+P+2ksrvYsMB64BZjoV/DJiQl/F0J79gqE
    dXkNWBR4AxgLXJ1E3aGS4gqjZbYhJPLVCZ+nz2JsXQiTs54h3FXeYsbz1YyvFiivjoA19XdV1Tg8
    0bcv8Sq+K7AQoeP1y1Lb4OPElq6E/puvgSme2KsjNussSnjv/1et8gnFiJ+LxvHkX6VdSsH9zBO9
    c85lnI+6cc4554neOeeyzhO9c85lnCd655zLOE/0zjmXcZ7onXMu4zzRO+dcxnmid865jPNE75xz
    GeeJ3jnnMs4TvXPOZZwneuecyzhP9M45l3Ge6J1zLuPmbusLJS1CWNbsF8DbwI5mNqWJ7d4m1Eb/
    CZhmZmu29ZjOOedKV84V/d+B+8xsJcJSdn9vZjsD+pjZqp7knXOu+spJ9P2Aq+P3VwN/aWFbX1DE
    OedSUk6iX9LMPo7ffwws2cx2Btwr6SlJg8o4nnPOuTZosY1e0n3AUk08dUzhD2Zmkppbk3A9M/tQ
    0uLAfZJeNrOHmzleQ8GP48xsXEvxOedceyOpD9CnpNe0dc1YSS8T2t4/ktQNeNDMftXKa3LA12Z2
    ZhPP+ZqxzjlXokqvGTsG2D1+vztwWxMBLCCpU/x+QWBz4L9lHNM551yJyrmiXwS4EViGguGVkroD
    l5rZVpKWA26JL5kb+KeZndLM/vyK3jnnSlRM7mxzok+aJ3rnnCtdpZtunHPO1QFP9M45l3Ge6J1z
    LuM80TvnXMZ5onfOuYzzRO+ccxnnid455zLOE71zzmWcJ3rnnMs4T/TOOZdxnuidcy7jPNE751zG
    eaJ3zrmM80TvnHMZ54neOecyzhO9c85lnCd655zLOE/0zjmXcZ7onXMu4zzRO+dcxnmid865jPNE
    75xzGeeJ3jnnMs4TvXPOZZwneuecyzhP9M45l3Ge6J1zLuM80TvnXMZ5onfOuYzzRO+ccxnnid45
    5zLOE71zzmWcJ3rnnMs4T/TOOZdxnuidcy7jPNE751zGeaJ3zrmM80TvnHMZ54neOecyzhO9c85l
    nCd655zLuDYnekk7SHpB0k+SVmthu76SXpb0mqQj23o855xzbVPOFf1/gW2B8c1tIGku4HygL7Ay
    MEDSr8s4pnPOuRLN3dYXmtnLAJJa2mxN4HUzeztuOwrYBniprcd1zjlXmkq30S8NvFfw8/vxMeec
    c1XS4hW9pPuApZp46mgzu6OI/VubonLOOZeYFhO9mW1W5v4/AHoW/NyTcFXfJEkNBT+OM7NxZR7f
    OecyRVIfoE9JrzEr76Jb0oPAYWb2dBPPzQ28AmwCTAaeAAaY2Rxt9JLMzFps8HfOOTerYnJnOcMr
    t5X0HrA2cJekf8XHu0u6C8DMpgP7A2OBF4EbmkryzjnnKqfsK/qk+BW9c86VrqJX9M455+qDJ3rn
    nMs4T/Q1KPaqO/y9KOTvxc/8vSiNJ/ra1CftAGpIn7QDqCF90g6ghvRJO4B64oneOecyzhO9c85l
    XE0Nr0w7Buecq0etDa+smUTvnHOuMrzpxjnnMs4TvXPOZVzqid6XGvyZpCskfSzpv2nHkiZJPSU9
    GJeqfF7SgWnHlBZJ80uaIGlSfC8a0o4pbZLmkjRRUjGl0jNL0tuSnovvxRMtbptmG31cavAVYFNC
    SeMnaaa6ZXsg6Y/A18A1ZvbbtONJi6SlgKXMbJKkhYCngb+048/FAmb2bawG+x9gqJlNSDuutEg6
    BFgd6GRm/dKOJy2S3gJWN7PPW9s27Sv6mUsNmtk0oHGpwXbJzB4Gvkg7jrSZ2UdmNil+/zVh6cnu
    6UaVHjP7Nn47LzAPMCPFcFIlqQewJXAZ4EUQi3wP0k70vtSga5GkXsCqQHu+gu0gaRLwMXCvmT2Z
    dkwpOhs4nHZ8sitgwL2SnpI0qKUN0070PrbTNSs229xEaKr4Ou140mJmM8zs90APYC1Jq6QdUxok
    /Rn4n5lNxK/mAdYzs9WBLYAhsem3SWkn+pKWGnTth6R5gJuBkWZ2W9rx1AIz+xJ4EOibdiwpWRfo
    F9umrwc2lnRNyjGlxsw+jP9+AtxKaApvUtqJ/ilgRUm9JM0L7ASMSTkmlzJJAi4HXjSzc9KOJ02S
    FpPUJX7fEdiM0GfR7pjZ0WbW08yWBfoD/zaz3dKOKw2SFpDUKX6/ILA50OxovVQTvS81OCtJ1wOP
    AitJek/SHmnHlJL1gF2AjeLQsYmS2utVbDfg35KeJay5fK+Z3Z1yTLWiPTf9Lgk8HPtuJgB3mtm9
    zW3sJRCccy7j0m66cc45V2Ge6J1zLuM80TvnXMZ5onfOuYzzRO+ccxnnid455zLOE72rCkmdJe1b
    8HN3SaMrdKx5JD3dxteuLunc+P1fJZ0Xv2+QdGj8Pi9pk+QiLo+kdlsewhVn7rQDcO1GV2A/4CIA
    M5sM7FChY61PKOdbMjN7mlAWGWadkGMF2+TaHlpF+GQY1yK/onfVciqwfJzlepqkXzQusBKvnG+T
    dK+ktyQNkXSIpGckPSapa9xueUn/itX6xkv6ZTPH6gv8a/YHJX0taXhcwOM+SWtKGifpDUlbx236
    FCxo0WThLElXSdoufn9qXCDlWUmnx8cWl3STpCfi17rx8YUkXRkXi3hW0rbx8QHxsf9KOnW2eE+M
    i448JmmJ+Piy8efnJJ1YsH23+L5MjPtav/hfj8syT/SuWo4E3jCzVc3sSOZMoqsA2wJ/AE4Cvjaz
    1YDHgMZ6Jv8ADjCzNQilai9s5lh9gHFNPL4A8ICZ/QaYCpwAbBKPO6yE/4sBJmlRwoIoq5hZ77g/
    gHOBs81sTWB7Qu10gOOAL8zsd3H7ByV1J5wENwJ+D/xBUuOaDAsAj8XKleOBQQX7v8DMfgdMLohr
    Z+AeM1sV+B0wqYT/k8swb7px1dJaWdkHzewb4BtJXwKNV9X/BX4XCzetC4wONc+AsBDHrAeRlgY+
    N7PvmzjGj2Y2tmC/35vZT5KeB3qV9L8JpgDfS7ocuDN+QVgx7dcFcXaK8W9CKNwHgJlNkbQh4f/+
    WYz/n8AGwO0x3rvi5k8TCppBeB+2jd+PBE6L3z8BXBErf95mZs+24f/kMsgTvasVPxR8P6Pg5xmE
    z2kHwtXwqq3spy9wTzPPTZvtGD9CqPcel+lrTWFbuOJJYk1CAt+eUKBvE8JJbS0z+7HwxTHxz37C
    s9keU8FxZo+3xRjN7OFYk/zPwFWSzjKza4v4f7mM86YbVy1TgU5teJ0AzGwq8Jak7SGUMpb0uya2
    /xNNtM8nQMyWpONVehcz+xdwCNA7PnUvcGDBdo2P3wcMKXi8C+EqfENJiyqsodwfeKiVWB6J2wEM
    LNjfMsAnZnYZobmotZOiayc80buqiE0Tj8ROwtOI7dyNT9PMCJfZnhsI7BVLsz4PzLIwdEyUK5jZ
    q82F0cLPTX3fWoydgDtiCeGHgYPjcwcCa8QO1xeAwfHxE4Gu8T2YBPQxs4+AvxMWFJkEPGVmdxQc
    o/B4jT8PJawo9BxhLd3GxzcCJkl6BtiR0JbvnJcpdtkhaT1goJntl3YsztUST/TOOZdx3nTjnHMZ
    54neOecyzhO9c85lnCd655zLOE/0zjmXcZ7onXMu4zzRO+dcxv0/7vhRkbSY+NUAAAAASUVORK5C
    YII=
    
  - text/plain
    <matplotlib.figure.Figure at 0x7f5ae0aa7668>
  metadata
    {
     "collapsed": false
    }
code 25
    # TODO: link to plotting intro
  metadata
    {
     "collapsed": true
    }
code 26
    sd.play(sig, fs)
  metadata
    {
     "collapsed": true
    }
code
    
  metadata
    {
     "collapsed": true
    }
markdown
    <p xmlns:dct="http://purl.org/dc/terms/">
      <a rel="license"
         href="http://creativecommons.org/publicdomain/zero/1.0/">
        <img src="http://i.creativecommons.org/p/zero/1.0/88x31.png" style="border-style: none;" alt="CC0" />
      </a>
      <br />
      To the extent possible under law,
      <span resource="[_:publisher]" rel="dct:publisher">
        <span property="dct:title">Matthias Geier</span></span>
      has waived all copyright and related or neighboring rights to
      this work.
    </p>
metadata
    {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.4.3+"
     }
    }
