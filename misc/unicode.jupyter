nbformat 4
nbformat_minor 2
code 1
    x = 'Ô¨Ä'
code 2
    import unicodedata
code 3
    unicodedata.name(x)
  execute_result
  - text/plain
    'LATIN SMALL LIGATURE FF'
code 4
    ord(x), hex(ord(x))
  execute_result
  - text/plain
    (64256, '0xfb00')
markdown
    http://unicode.org/cldr/utility/character.jsp?a=FB00
code 5
    unicodedata.lookup('latin small ligature ff')
  execute_result
  - text/plain
    'Ô¨Ä'
code 6
    unicodedata.decomposition(x)
  execute_result
  - text/plain
    '<compat> 0066 0066'
code 7
    unicodedata.normalize('NFC', x)
  execute_result
  - text/plain
    'Ô¨Ä'
code 8
    unicodedata.normalize('NFKC', x)
  execute_result
  - text/plain
    'ff'
code 9
    unicodedata.normalize('NFD', x)
  execute_result
  - text/plain
    'Ô¨Ä'
code 10
    unicodedata.normalize('NFKD', x)
  execute_result
  - text/plain
    'ff'
code 11
    text = 'SchlaraÔ¨Äenland'
code 12
    text.find('affe')
  execute_result
  - text/plain
    -1
code
    
code
    
code
    
code 13
    '\N{HANGUL SYLLABLE OS}'
  execute_result
  - text/plain
    'Ïò∑'
code 14
    '\N{HANGUL SYLLABLE MOS}'
  execute_result
  - text/plain
    'Î™ª'
code 15
    '\N{HANGUL SYLLABLE HUS}'  # hat
  execute_result
  - text/plain
    'Ìõó'
code 16
    '\N{HANGUL SYLLABLE HOS}'  # hat
  execute_result
  - text/plain
    'Ìôã'
code 17
    '\N{HANGUL SYLLABLE US}'  # no neck
  execute_result
  - text/plain
    'ÏõÉ'
code 18
    '\N{HANGUL SYLLABLE EUS}'
  execute_result
  - text/plain
    'Ïùè'
code 19
    head = '\N{HANGUL CHOSEONG IEUNG}'
    arms = '\N{HANGUL JUNGSEONG O}'
    legs = '\N{HANGUL JONGSEONG SIOS}'
    head, arms, legs
  execute_result
  - text/plain
    ('·Ñã', '·Ö©', '·Ü∫')
code 20
    head + arms + legs
  execute_result
  - text/plain
    '·Ñã·Ö©·Ü∫'
code 21
    print(_)
  stream stdout
    ·Ñã·Ö©·Ü∫
code 22
    unicodedata.normalize('NFC', head + arms + legs)
  execute_result
  - text/plain
    'Ïò∑'
code 23
    '\u110b\u1169\u11ba'
  execute_result
  - text/plain
    '·Ñã·Ö©·Ü∫'
code 24
    'Ïò∑'.encode('unicode_escape')
  execute_result
  - text/plain
    b'\\uc637'
code 25
    hex(ord('Ïò∑'))
  execute_result
  - text/plain
    '0xc637'
code
    
code
    
code
    
code 26
    '„ÅÇ„Çä„Åå„Å®„ÅÜ'  # a ri ga to u = arigat≈ç
  execute_result
  - text/plain
    '„ÅÇ„Çä„Åå„Å®„ÅÜ'
code 27
    unicodedata.name('„Åå')
  execute_result
  - text/plain
    'HIRAGANA LETTER GA'
code 28
    unicodedata.name('≈ç')
  execute_result
  - text/plain
    'LATIN SMALL LETTER O WITH MACRON'
code 29
    unicodedata.name('„Åã')
  execute_result
  - text/plain
    'HIRAGANA LETTER KA'
code 30
    unicodedata.name('„Çô')
  execute_result
  - text/plain
    'COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK'
code 31
    '„Åã' + '„Çô'
  execute_result
  - text/plain
    '„Åã„Çô'
code 32
    'o\N{COMBINING MACRON}'
  execute_result
  - text/plain
    'oÃÑ'
code 33
    'o\N{COMBINING MACRON}' == '≈ç'
  execute_result
  - text/plain
    False
code
    
code 34
    style = 'Í∞ïÎÇ®Íµ¨'
code 35
    unicodedata.normalize('NFD', style)
  execute_result
  - text/plain
    '·ÑÄ·Ö°·Üº·ÑÇ·Ö°·Ü∑·ÑÄ·ÖÆ'
code 36
    unicodedata.normalize('NFKD', style)
  execute_result
  - text/plain
    '·ÑÄ·Ö°·Üº·ÑÇ·Ö°·Ü∑·ÑÄ·ÖÆ'
code
    
code 37
    print('x\N{COMBINING ENCLOSING KEYCAP}')
  stream stdout
    x‚É£
code 38
    print('\N{CAMERA}\N{COMBINING ENCLOSING CIRCLE BACKSLASH}')
  stream stdout
    üì∑‚É†
code 39
    print('\N{HEAVY BLACK HEART}\N{COMBINING ENCLOSING CIRCLE BACKSLASH}')
  stream stdout
    ‚ù§‚É†
code 40
    print('\N{PISTOL}\N{COMBINING ENCLOSING CIRCLE BACKSLASH}')
  stream stdout
    üî´‚É†
code 41
    print('\N{WOMAN}\N{EMOJI MODIFIER FITZPATRICK TYPE-5}')
  stream stdout
    üë©üèæ
code
    
markdown
    http://stackoverflow.com/questions/43618487/why-are-emoji-characters-like-treated-so-strangely-in-swift-strings
code 42
    '\U0001F469\u200D\U0001F469\u200D\U0001F467\u200D\U0001F466'
  execute_result
  - text/plain
    'üë©\u200düë©\u200düëß\u200düë¶'
code 43
    print(_)
  stream stdout
    üë©‚Äçüë©‚Äçüëß‚Äçüë¶
code
    
metadata
    {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.3"
     },
     "widgets": {
      "state": {},
      "version": "2.0.10"
     }
    }
