nbformat 4
nbformat_minor 2
markdown
    # A Short Introduction to Python
markdown
    [back to main page](https://github.com/mgeier/python-audio)
    
    Python is a general-purpose programming language.
    It is an *interpreted* language, i.e. source code is not compiled into an executable file but it is directly executed by an *interpreter*.
    A file containing Python code can be executed like this:
    
        python my_code.py
    
    Python can also act as an interactive interpreter where you can type an run Python code line-by-line.
    It can be started by simply running
    
        python
    
    You have the full power of Python in there, but it is not very convenient.
    A much better alternative is *IPython*, which is described on a [separate page](http://nbviewer.ipython.org/urls/raw.github.com/mgeier/python-audio/master/intro-ipython.ipynb).
    
    Actually, this very page you're just reading is a so-called *IPython notebook*, which means that you can view it either as a [static web page](http://nbviewer.ipython.org/urls/raw.github.com/mgeier/python-audio/master/intro-python.ipynb) or, if you have IPython installed locally, you can also open the [notebook file](http://raw.github.com/mgeier/python-audio/master/intro-python.ipynb) with IPython and run the code in it interactively and you can also change stuff and play around with it.
markdown
    ## Python 2 vs. 3
markdown
    TODO
markdown
    ## Why "Python"?
markdown
    It is named after the famous British comedy group *Monty Python*. If that doesn't ring a bell, you should search the interwebs and watch some videos of them, they are hilarious! In Python example code, you will often find references to their sketches, e.g. a list may contain `["eggs", "bacon", "spam"]` which would be a reference to [Monty Python's Spam Sketch](http://www.youtube.com/watch?v=anwy2MPT5RE).
markdown
    ## Hello World!
markdown
    According to international law, every programming language tutorial has to start by showing how to print the sentence "Hello World!" to the screen. This is how it's done in Python:
code 1
    print("Hello World!")
  stream stdout
    Hello World!
  metadata
    {
     "collapsed": false
    }
markdown
    But now for something completely different:
markdown
    ## Numbers
markdown
    Everybody loves numbers, right? In Python, there are two types of numbers. On the one hand, there are *integers* like
code 2
    42
  execute_result
  - text/plain
    42
  metadata
    {
     "collapsed": false
    }
markdown
    ... and on the other hand, there are *floating point* numbers like
code 3
    3.1415
  execute_result
  - text/plain
    3.1415
  metadata
    {
     "collapsed": false
    }
markdown
    You probably know that "everything in Python is an object", which is also true for numbers. And every object has a type, so let's check that:
code 4
    type(42)
  execute_result
  - text/plain
    int
  metadata
    {
     "collapsed": false
    }
markdown
    Looks close enough to "integer", doesn't it?
code 5
    type(3.1415)
  execute_result
  - text/plain
    float
  metadata
    {
     "collapsed": false
    }
markdown
    ... and this is supposed to mean "floating point number".
markdown
    If you want to convert an `int` to a `float`, you can do it like this:
code 6
    float(42)
  execute_result
  - text/plain
    42.0
  metadata
    {
     "collapsed": false
    }
markdown
    TODO: infinite precision `int` (or `long`?), double precision `float`
markdown
    TODO: more numeric types in external libraries, e.g. NumPy
markdown
    To be completely honest, there is a third type of numbers built into the core of the Python language: *complex* numbers.
code 7
    2.4 + 3.1j
  execute_result
  - text/plain
    (2.4+3.1j)
  metadata
    {
     "collapsed": false
    }
markdown
    Appending a lower-case `j` to a number (without a space in-between), makes it an *imaginary* number.
    Let's look at the type of the whole thing:
code 8
    type(2.4 + 3.1j)
  execute_result
  - text/plain
    complex
  metadata
    {
     "collapsed": false
    }
markdown
    A `complex` is basically a pair of `float`s, one for the *real part* and one for the *imaginary part*. Complex numbers can come in very handy when doing scientific computations.
markdown
    ## Operators
markdown
    Numbers are great. Let's see how they interact with each other.
code 9
    2 + 3
  execute_result
  - text/plain
    5
  metadata
    {
     "collapsed": false
    }
code 10
    2.0 + 3.0
  execute_result
  - text/plain
    5.0
  metadata
    {
     "collapsed": false
    }
code 11
    5 + 2.5
  execute_result
  - text/plain
    7.5
  metadata
    {
     "collapsed": false
    }
code 12
    2 * 3
  execute_result
  - text/plain
    6
  metadata
    {
     "collapsed": false
    }
code 13
    -4 * (3 + 1) - 0.5
  execute_result
  - text/plain
    -16.5
  metadata
    {
     "collapsed": false
    }
code 14
    5 / 2
  execute_result
  - text/plain
    2.5
  metadata
    {
     "collapsed": false
    }
markdown
    So far, not really surprising results. You can mix `int`s and `float`s. As soon as a `float` is involved, the result is also a `float`.
markdown
    **Attention**: integer division behaves differently in Python 2 and Python 3!
    In Python 2, it behaved like in the programming language *C*, i.e. the result was truncated to an integer, e.g. `5 / 2` would return `2` and the result would be of type `int`.
    In Python 3, however, the behavior was changed and now even the division of two `int`s returns a `float`.
markdown
    If you want the old truncating behavior of Python 2, you can use the `//` operator:
code 15
    5 // 2
  execute_result
  - text/plain
    2
  metadata
    {
     "collapsed": false
    }
markdown
    On the other hand, if you want the new behaviour in Python 2, just write this line before your calculations:
        
    ```python
    from __future__ import division
    ```
    
    Alternatively, you can of course also just convert one of the operands (or both) to `float` beforehand.
markdown
    Let's see, what else do we have?
    Powers, for example. While you might be used to the `^` operator from other languages, Python uses `**` for that. The `^` operator is a very different thing, namely logical *xor*. Don't confuse the two!
code 16
    3 ** 2
  execute_result
  - text/plain
    9
  metadata
    {
     "collapsed": false
    }
markdown
    Of course, there is also a *modulo* operator:
code 17
    13 % 4
  execute_result
  - text/plain
    1
  metadata
    {
     "collapsed": false
    }
markdown
    Besides the these *arithmetic operators*, there are also *comparison operators* which return *boolean* values.
code 18
    3 > 4
  execute_result
  - text/plain
    False
  metadata
    {
     "collapsed": false
    }
code 19
    3 <= 4
  execute_result
  - text/plain
    True
  metadata
    {
     "collapsed": false
    }
code 20
    3 + 1 == 4
  execute_result
  - text/plain
    True
  metadata
    {
     "collapsed": false
    }
markdown
    ## Assignment
markdown
    TODO
code 20
    
  metadata
    {
     "collapsed": false
    }
markdown
    ## Strings
markdown
    TODO
code 20
    
  metadata
    {
     "collapsed": false
    }
markdown
    ## Functions
markdown
    TODO
code 21
    # docstrings
  metadata
    {
     "collapsed": false
    }
markdown
    ## Lists, Tuples
code 22
    
  metadata
    {
     "collapsed": false
    }
markdown
    ## Dictionaries
code 22
    
  metadata
    {
     "collapsed": false
    }
markdown
    ## Modules
code 22
    
  metadata
    {
     "collapsed": false
    }
markdown
    ## Links
markdown
    http://docs.python.org/3/tutorial/  
    http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html
metadata
    {
     "orig_nbformat": 3,
     "orig_nbformat_minor": 0
    }
