nbformat 4
nbformat_minor 2
markdown
    # A Short Introduction to Python
markdown
    [back to main page](https://github.com/mgeier/python-audio)
    
    Python is a general-purpose programming language.
    It is an *interpreted* language, i.e. source code is not compiled into an executable file but it is directly executed by an *interpreter*.
    A file containing Python code can be executed like this:
    
        python my_code.py
    
    Python can also act as an interactive interpreter where you can type an run Python code line-by-line.
    It can be started by simply running
    
        python
    
    You have the full power of Python in there, but it is not very convenient.
    A much better alternative is *IPython*, which is described on a [separate page](http://nbviewer.ipython.org/urls/raw.github.com/mgeier/python-audio/master/intro-ipython.ipynb).
    
    Actually, this very page you're just reading is a so-called *IPython notebook*, which means that you can view it either as a [static web page](http://nbviewer.ipython.org/urls/raw.github.com/mgeier/python-audio/master/intro-python.ipynb) or, if you have IPython installed locally, you can also open the [notebook file](http://raw.github.com/mgeier/python-audio/master/intro-python.ipynb) with IPython and run the code in it interactively and you can also change stuff and play around with it.
markdown
    ## Python 2 vs. 3
markdown
    TODO
markdown
    ## Why "Python"?
markdown
    It is named after the famous British comedy group *Monty Python*. If that doesn't ring a bell, you should search the interwebs and watch some videos of them, they are hilarious! In Python example code, you will often find references to their sketches, e.g. a list may contain `["eggs", "bacon", "spam"]` which would be a reference to [Monty Python's Spam Sketch](http://www.youtube.com/watch?v=anwy2MPT5RE).
markdown
    ## Hello World!
markdown
    According to international law, every programming language tutorial has to start by showing how to print the sentence "Hello World!" to the screen. This is how it's done in Python:
code 1
    print("Hello World!")
  stream stdout
    Hello World!
  metadata
    {
     "collapsed": false
    }
markdown
    Here you can see how a function is called (more precisely, a built-in function named `print`) with one argument. Furthermore, you see how string literals are created.
markdown
    But now for something completely different:
markdown
    ## Numbers
markdown
    Everybody loves numbers, right? In Python, there are two types of numbers. On the one hand, there are *integers* like
code 2
    42
  execute_result
  - text/plain
    42
  metadata
    {
     "collapsed": false
    }
markdown
    ... and on the other hand, there are *floating point* numbers like
code 3
    3.1415
  execute_result
  - text/plain
    3.1415
  metadata
    {
     "collapsed": false
    }
markdown
    You probably know that "everything in Python is an object", which is also true for numbers. Numbers are objects. And every object has a type, so let's check that:
code 4
    type(42)
  execute_result
  - text/plain
    int
  metadata
    {
     "collapsed": false
    }
markdown
    Looks close enough to "integer", doesn't it?
code 5
    type(3.1415)
  execute_result
  - text/plain
    float
  metadata
    {
     "collapsed": false
    }
markdown
    ... and this is supposed to mean "floating point number".
markdown
    If you want to convert an `int` to a `float`, you can do it like this:
code 6
    float(42)
  execute_result
  - text/plain
    42.0
  metadata
    {
     "collapsed": false
    }
markdown
    TODO: infinite precision `int` (or `long`?), double precision `float`
markdown
    TODO: more numeric types in external libraries, e.g. NumPy
markdown
    To be completely honest, there is a third type of numbers built into the core of the Python language: *complex* numbers.
code 7
    2.4 + 3.1j
  execute_result
  - text/plain
    (2.4+3.1j)
  metadata
    {
     "collapsed": false
    }
markdown
    Appending a lower-case `j` to a number (without a space in-between), makes it an *imaginary* number.
    Let's look at the type of the whole thing:
code 8
    type(2.4 + 3.1j)
  execute_result
  - text/plain
    complex
  metadata
    {
     "collapsed": false
    }
markdown
    A `complex` is basically a pair of `float`s, one for the *real part* and one for the *imaginary part*. Complex numbers can come in very handy when doing scientific computations.
markdown
    ## Operators
markdown
    Numbers are great. Let's see how they interact with each other.
code 9
    2 + 3
  execute_result
  - text/plain
    5
  metadata
    {
     "collapsed": false
    }
code 10
    2.0 + 3.0
  execute_result
  - text/plain
    5.0
  metadata
    {
     "collapsed": false
    }
code 11
    5 + 2.5
  execute_result
  - text/plain
    7.5
  metadata
    {
     "collapsed": false
    }
code 12
    2 * 3
  execute_result
  - text/plain
    6
  metadata
    {
     "collapsed": false
    }
code 13
    -4 * (3 + 1) - 0.5
  execute_result
  - text/plain
    -16.5
  metadata
    {
     "collapsed": false
    }
code 14
    5 / 2
  execute_result
  - text/plain
    2.5
  metadata
    {
     "collapsed": false
    }
markdown
    So far, not really surprising results. You can mix `int`s and `float`s. As soon as a `float` is involved, the result is also a `float`.
markdown
    **Attention**: integer division behaves differently in Python 2 and Python 3!
    In Python 2, it behaved like in the programming language *C*, i.e. the result was truncated to an integer, e.g. `5 / 2` would return `2` and the result would be of type `int`.
    In Python 3, however, the behavior was changed and now even the division of two `int`s returns a `float`.
markdown
    If you want the old truncating behavior of Python 2, you can use the `//` operator:
code 15
    5 // 2
  execute_result
  - text/plain
    2
  metadata
    {
     "collapsed": false
    }
markdown
    On the other hand, if you want the new behaviour in Python 2, just write this line before your calculations:
        
    ```python
    from __future__ import division
    ```
    
    Alternatively, you can of course also just convert one of the operands (or both) to `float` beforehand.
markdown
    Let's see, what else do we have?
    Powers, for example. While you might be used to the `^` operator from other languages, Python uses `**` for that. The `^` operator is a very different thing, namely logical *xor*. Don't confuse the two!
code 16
    3 ** 2
  execute_result
  - text/plain
    9
  metadata
    {
     "collapsed": false
    }
markdown
    Of course, there is also a *modulo* operator:
code 17
    13 % 4
  execute_result
  - text/plain
    1
  metadata
    {
     "collapsed": false
    }
markdown
    Besides the these *arithmetic operators*, there are also *comparison operators* which return *boolean* values.
code 18
    3 > 4
  execute_result
  - text/plain
    False
  metadata
    {
     "collapsed": false
    }
code 19
    3 <= 4
  execute_result
  - text/plain
    True
  metadata
    {
     "collapsed": false
    }
code 20
    3 + 1 == 4
  execute_result
  - text/plain
    True
  metadata
    {
     "collapsed": false
    }
markdown
    ## Strings
markdown
    As we saw above, strings can be written using double quotes:
code 21
    "Hello, World!"
  execute_result
  - text/plain
    'Hello, World!'
  metadata
    {
     "collapsed": false
    }
markdown
    However, it's also possible to write them with single quotes:
code 22
    'Hello, World!'
  execute_result
  - text/plain
    'Hello, World!'
  metadata
    {
     "collapsed": false
    }
markdown
    To the Python interpreter, this doesn't make a difference. It is, however, common to use double quotes for strings containing natural language and anything that is at some point presented to the user. Single quotes are normally used for short strings which are only used inside a program.
markdown
    Both variants have the type `str`:
code 23
    type("Hello, World!")
  execute_result
  - text/plain
    str
  metadata
    {
     "collapsed": false
    }
markdown
    You can use `str()` to convert any object to a string:
code 24
    str(42)
  execute_result
  - text/plain
    '42'
  metadata
    {
     "collapsed": false
    }
markdown
    There is a special notation for writing multi-line string literals using triple double quotes:
code 25
    """One,
    two,
    three lines"""
  execute_result
  - text/plain
    'One,\ntwo,\nthree lines'
  metadata
    {
     "collapsed": false
    }
markdown
    The same can also be written with triple single quotes, but this is much less common.
markdown
    Strings can be concatenated with the `+` operator:
code 26
    "Hello" + "," + " " + "World" + "!"
  execute_result
  - text/plain
    'Hello, World!'
  metadata
    {
     "collapsed": false
    }
markdown
    The `*` operator (followed by an `int`) has a special meaning for a `str`:
code 27
    "#" * 79
  execute_result
  - text/plain
    '###############################################################################'
  metadata
    {
     "collapsed": false
    }
markdown
    Unlike in many other programming languages, there is no separate type for single characters in Python. Single characters are simply written as strings which happen to contain only one character.
markdown
    There is much more to say about strings. To learn more about them, have a look at the [official `str` documentation](https://docs.python.org/3.3/library/stdtypes.html#textseq).
markdown
    ## Lists
markdown
    A `list` is a container that can hold arbitrary objects. A `list` can be created by putting objects, separated by commas, between a pair of brackets.
code 28
    [42, 3.1415, "Ni!"]
  execute_result
  - text/plain
    [42, 3.1415, 'Ni!']
  metadata
    {
     "collapsed": false
    }
markdown
    An empty list looks like this:
code 29
    []
  execute_result
  - text/plain
    []
  metadata
    {
     "collapsed": false
    }
markdown
    Of course, a list can also have just a single element:
code 30
    [7]
  execute_result
  - text/plain
    [7]
  metadata
    {
     "collapsed": false
    }
markdown
    To concatenate multiple lists, the `+` operator can be used:
code 31
    [1, 2] + [3] + [4, 5, 6]
  execute_result
  - text/plain
    [1, 2, 3, 4, 5, 6]
  metadata
    {
     "collapsed": false
    }
markdown
    Similar to strings, you can also use the `*` operator (followed by an `int`) to repeat lists:
code 32
    [1, 2, 3] * 5
  execute_result
  - text/plain
    [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
  metadata
    {
     "collapsed": false
    }
markdown
    Like everything else, lists are also objects, and they have a type:
code 33
    type([1, 2, 3])
  execute_result
  - text/plain
    list
  metadata
    {
     "collapsed": false
    }
markdown
    We can use `list()` to create a list from some other object (which must be *iterable*):
code 34
    list("Hello, World!")
  execute_result
  - text/plain
    ['H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!']
  metadata
    {
     "collapsed": false
    }
markdown
    Lists are *mutable* data structures, i.e. their elements can be changed. But more about that later ...
markdown
    ## Tuples
markdown
    Tuples are quite similar to `list`s, with the main difference that they are *immutable* data structures, i.e. their content cannot be changed. Some objects, separated by commas, create a tuple:
code 35
    42, 3.1415, "Ni!"
  execute_result
  - text/plain
    (42, 3.1415, 'Ni!')
  metadata
    {
     "collapsed": false
    }
markdown
    Just like lists, tuples can also hold arbitrary objects.
markdown
    Tuples are often enclosed in parentheses, but those are only really required if otherwise the code would be ambiguous, e.g. when creating a tuple of tuples:
code 36
    1, (2, 3), 4
  execute_result
  - text/plain
    (1, (2, 3), 4)
  metadata
    {
     "collapsed": false
    }
markdown
    Another situation where parentheses are obligatory, are empty tuples:
code 37
    ()
  execute_result
  - text/plain
    ()
  metadata
    {
     "collapsed": false
    }
markdown
    **Attention**: Putting a single item between parentheses does not create a tuple!
code 38
    (7)
  execute_result
  - text/plain
    7
  metadata
    {
     "collapsed": false
    }
markdown
    This is because a tuple is created with an obligatory comma, the parentheses are optional:
code 39
    7,
  execute_result
  - text/plain
    (7,)
  metadata
    {
     "collapsed": false
    }
markdown
    Like `str` and `list`, `tuple`s can be concatenated with the `+` operator and repeated with `*`:
code 40
    (1, 2) + (3,) * 5
  execute_result
  - text/plain
    (1, 2, 3, 3, 3, 3, 3)
  metadata
    {
     "collapsed": false
    }
markdown
    Note that the parentheses are obligatory in this case.
markdown
    It should come as no surprise that tuples also have a type:
code 41
    type((1, 2, 3))
  execute_result
  - text/plain
    tuple
  metadata
    {
     "collapsed": false
    }
markdown
    Note that when used as a function argument, the tuple has to be enclosed in parentheses (otherwise it would be interpreted as a function call with multiple arguments).
markdown
    ## Assignment
markdown
    https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
markdown
    ### Identifiers (a.k.a. Names)
markdown
    A form of abstraction: naming things.
markdown
    Binding, re-binding, references.
markdown
    ### Multiple Identifiers
markdown
    ### Attribute References
markdown
    ### Element Access (a.k.a. Subscription)
markdown
    ### Slicing
markdown
    ## Garbage Collection
markdown
    ## Functions
code 42
    # docstrings
  metadata
    {
     "collapsed": false
    }
code 43
    # built-in functions
  metadata
    {
     "collapsed": false
    }
markdown
    ## `if` Statements
markdown
    ## Significant Whitespace
markdown
    ## Loops
markdown
    ## Dictionaries
markdown
    ## Sets
markdown
    ## None
markdown
    ## Exceptions
markdown
    ## Modules
markdown
    ## Classes
markdown
    ## PEP 8
markdown
    ## Many More Things ...
markdown
    * string formatting
    * list/set/dict comprehensions
    * iterators
    * generators
    * generator expressions
    * `if`/`else` expressions
    * anonymous functions (a.k.a. `lambda`s)
    * static methods, class methods
    * "special" methods, operator overloading
    * properties, descriptors
    * metaclasses
    * ...
markdown
    ## Links
markdown
    http://docs.python.org/3/tutorial/  
    http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html
metadata
    {
     "orig_nbformat": 3,
     "orig_nbformat_minor": 0
    }
