nbformat 4
nbformat_minor 0
markdown
    # Getting Started With `matplotlib`
    
    [back to overview page](index.ipynb)
    
    This page is about the general mechanics of plotting with [matplotlib](http://matplotlib.org/), not so much about the plots themselves.
    For more information about those, have a look at the [overview page](index.ipynb) and especially at the [external links section](index.ipynb#External-Links).
markdown
    ## Outdated Information
    
    `matplotlib` has been very actively developed in the last few years.
    Many improvements have been made and the API as well as the recommended usage patterns have changed quite a bit.
    
    Sadly, this also means that a lot of documentation out there is outdated and may actually, although well intended, be bad advice.
    In fact, this very page may be outdated at the time you are reading it!
    Have a look at this date:
code 1
    !date -I
  stream stdout
    2015-09-01
  metadata
    {
     "collapsed": false
    }
markdown
    This is the date of the last change to this page.
    If it's older then half a year or a year, it is very likely to be outdated, so don't read it!
markdown
    ## Plotting Step by Step
    
    There are several different ways of using `matplotlib`, here we provide mainly slow-paced step-by-step instructions that show explicitly what has to be done in order to create a plot.
    
    These instructions should help you to create your own individualized plotting functions (see below).
    
    You can also use `matplotlib` in a much less explicit and quicker-to-type way called "pylab" (see further below).
markdown
    ### Importing `matplotlib`
    
    There are several ways to do that, some of which are *not recommended* anymore (especially "`from pylab import *"`).
    
    As far as I know, this is *currently* the canonical and recommended way to import matplotlib for most use cases:
code 2
    import matplotlib.pyplot as plt
  metadata
    {
     "collapsed": false
    }
markdown
    For some specialized cases, you can also import specific classes from certain `matplotlib` sub-modules, e.g.
    
        from matplotlib.patches import Polygon, Ellipse
        from matplotlib.colors import LinearSegmentedColormap
    
    There are lots of code examples out there that still use them, but the following imports are [not recommended anymore](http://matplotlib.org/faq/usage_faq.html#matplotlib-pyplot-and-pylab-how-are-they-related) and you should **never use any of these**:
    
    <pre style="color:gray">
    from pylab import *
    from matplotlib.pyplot import *
    </pre>
markdown
    ### Creating a `Figure` and One or More `Axes` Objects
    
    Before plotting anything, a [Figure object](http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure) has to be created.
    Some commands handle figure creation and selection automatically, but it normally makes your code easier to read if you create figures explicitly.
    
    A figure typically contains one or more [Axes objects](http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes).
    Most plotting commands work on those.
    
    You can create a figure and a single axes object with a single command like this:
code 3
    fig, ax = plt.subplots()
  metadata
    {
     "collapsed": false
    }
markdown
    There are many options you can pass to [plt.subplots()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplots) in order to customize things, have a look at the documentation of [plt.figure()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.figure), [add_subplot()](http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure.add_subplot) and [GridSpec](http://matplotlib.org/api/gridspec_api.html#matplotlib.gridspec.GridSpec).
    
    If you want more than one `Axes` object, you can specify rows and columns of subplots:
    
        fig, (ax1, ax2) = plt.subplots(1, 2)
    
    If you want, you can also use [plt.figure()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.figure) to create a figure object first, and then use [add_axes()](http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure.add_axes) and/or [add_subplot()](http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure.add_subplot) to add axes objects.
    
    If you want to continue plotting on the previously used `Axes` object, you can use [plt.gca()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.gca) (= *get current axes*).
    If no axes object exists, this command creates one for you (it also creates a figure object, if needed).
    
    Each figure has a (possibly empty) list of references to all its `Axes` objects ...
code 4
    fig.axes
  execute_result
  - text/plain
    [<matplotlib.axes._subplots.AxesSubplot at 0x7fa3436ca668>]
  metadata
    {
     "collapsed": false
    }
markdown
    Obviously, our example figure has one `Axes` object (the one we got from `plt.subplots()` above).
code 5
    fig.axes[0] is ax
  execute_result
  - text/plain
    True
  metadata
    {
     "collapsed": false
    }
markdown
    Each `Axes` object has a reference to its (exactly one) parent figure:
code 6
    ax.figure
  execute_result
  - text/plain
    <matplotlib.figure.Figure at 0x7fa346443dd8>
  metadata
    {
     "collapsed": false
    }
markdown
    So don't worry if you misplace your figure reference, you can always get it from any contained `Axes` object.
code 7
    ax.figure is fig
  execute_result
  - text/plain
    True
  metadata
    {
     "collapsed": false
    }
markdown
    ### Plotting Data
code 8
    data = 4, 8, 15, 16, 23, 42
  metadata
    {
     "collapsed": false
    }
markdown
    Once we have an `Axes` object, we can plot data onto it.
    There are many types of plots (have a look at the [`Axes` documentation](http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes)), here we'll just create a simple 2D line plot:
code 9
    ax.plot(data)
  execute_result
  - text/plain
    [<matplotlib.lines.Line2D at 0x7fa340e19b00>]
  metadata
    {
     "collapsed": false
    }
markdown
    As you can see, this returns a list of graphical objects (in our case it's only one line, but you could plot several lines at once).
    You can use those objects for fine-tuning the plot and you can also get a reference to the `Axes` object it belongs to:
code 10
    _[0].axes is ax
  execute_result
  - text/plain
    True
  metadata
    {
     "collapsed": false
    }
markdown
    > In case you didn't know: The underscore "`_`" is a special variable name that is set by the interactive Python interpreter to the result of the last expression of the previously executed code cell.
    
    If you don't need the returned list, you can hide it by appending a semicolon (this is only necessary in the last line of a code cell).
    Let's plot again:
code 11
    ax.plot(data);
  metadata
    {
     "collapsed": false
    }
markdown
    ### But Wait, I Don't See No Plot!
    
    Yes, [that's normal](http://matplotlib.org/faq/howto_faq.html#use-show).
    Opening a window and drawing all the graphical elements of a plot may be computationally expensive, so `matplotlib` doesn't do it right away.
    You might want to add further elements to your plot and it's enough to actually draw it once you are finished.
    Also, you might not even want to open a plot window and instead create an image file containing the plot (see below).
    
    Once you are finished adding stuff to your plot and you actually want to show it, use [plt.show()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.show):
code 12
    plt.show()
  metadata
    {
     "collapsed": false
    }
markdown
    Now you should see a plot window popping up!
    
    The `plt.show()` command blocks execution until the figure window is closed.
    This is useful if you want to show plots from a Python script, otherwise all plot windows would be closed automatically at the end of the script.
    It is not very useful in an interactive session, where you should use `matplotlib`'s interactive mode (see [Interactive Plotting](#Interactive-Plotting) below).
    
    Please close the plot window to continue.
markdown
    ### Plotting to a File
    
    Analyzing your data in an interactive plot window is nice, but you probably also want to save the plot for later.
    It's very easy to [save a figure to a file](http://matplotlib.org/api/figure_api.html?highlight=savefig#matplotlib.figure.Figure.savefig), e.g. a PNG file:
code 13
    fig.savefig('my_plot.png')
  metadata
    {
     "collapsed": false
    }
markdown
    This creates a file named [my_plot.png](my_plot.png) in the current directory.
    You can choose the file type by means of the file extension:
    
        fig.savefig('my_plot.svg')
        fig.savefig('my_plot.pdf')
        fig.savefig('my_plot.eps')
    
    You can [save multiple figures to one PDF file with `PdfPages`](http://matplotlib.org/faq/howto_faq.html#save-multiple-plots-to-one-pdf-file).
    
    It is also possible to [create PGF files for use in LaTeX documents](http://matplotlib.org/users/pgf.html):
    
        fig.savefig('my_plot.pgf')
    
    The available image formats depend on the backend, you can get a list for the currently selected backend:
code 14
    fig.canvas.get_supported_filetypes_grouped()
  execute_result
  - text/plain
    {'Encapsulated Postscript': ['eps'],
     'Joint Photographic Experts Group': ['jpeg', 'jpg'],
     'PGF code for LaTeX': ['pgf'],
     'Portable Document Format': ['pdf'],
     'Portable Network Graphics': ['png'],
     'Postscript': ['ps'],
     'Raw RGBA bitmap': ['raw', 'rgba'],
     'Scalable Vector Graphics': ['svg', 'svgz'],
     'Tagged Image File Format': ['tif', 'tiff']}
  metadata
    {
     "collapsed": false
    }
markdown
    ### Closing a Plot
    
    `matplotlib` keeps references to all figures and even if you close all plot windows and delete all your own references, the figures are still kept in memory.
    
    To release all resources for the current figure, use:
code 15
    plt.close()
  metadata
    {
     "collapsed": false
    }
markdown
    To close all figures, use:
code 16
    plt.close('all')
  metadata
    {
     "collapsed": false
    }
markdown
    Note that [plt.clf()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.clf) and [plt.cla()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.cla) clears the current figure and axes, respectively, but it doesn't reset the parameters (e.g. figure size) and it doesn't free all resources.
markdown
    ## Interactive Plotting
    
    By default, `matplotlib` is configured for [non-interactive plotting](http://matplotlib.org/faq/usage_faq.html#what-is-interactive-mode), which makes sense for the use in Python scripts.
code 17
    plt.isinteractive()
  execute_result
  - text/plain
    False
  metadata
    {
     "collapsed": false
    }
markdown
    In an interactive session (like this IPython notebook), however, it makes much more sense to switch to interactive plotting.
    
    `matplotlib` provides the commands [plt.ion()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.ion) and [plt.ioff()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.ioff) to turn interactive mode on and off, respectively.
    When using Jupyter/IPython, it's even better to use [this "magic" command](http://ipython.org/ipython-doc/stable/interactive/magics.html#magic-matplotlib):
code 18
    %matplotlib
  stream stdout
    Using matplotlib backend: TkAgg
  metadata
    {
     "collapsed": false
    }
markdown
    This prepares Jupyter/IPython for the use of `matplotlib` and it enables its interactive mode.
    This doesn't import anything, you still have to use ...
code 19
    import matplotlib.pyplot as plt
  metadata
    {
     "collapsed": false
    }
markdown
    ... to actually import `matplotlib`.
code 20
    plt.isinteractive()
  execute_result
  - text/plain
    True
  metadata
    {
     "collapsed": false
    }
code 21
    data = 4, 8, 15, 16, 23, 42
    fig, ax = plt.subplots()
    ax.plot(data);
  metadata
    {
     "collapsed": false
    }
markdown
    Now the plot window should open immediately (without calling `plt.show()`) and code cells can be executed even if plot windows are open.
    
    The effects of some of `Axes`'s methods are still not immediately visible, e.g.:
code 22
    ax.grid()
  metadata
    {
     "collapsed": false
    }
markdown
    Use `fig.canvas.draw()` to update the current figure.
    Alternatively, you can also use `plt.draw()`.
code 23
    fig.canvas.draw()  # or plt.draw()
  metadata
    {
     "collapsed": false
    }
markdown
    If you put all plotting commands into a single code cell (or if you put them into a separate function, as explained below), you don't need this.
markdown
    ## Inline Plotting
    
    The interactive plot window is very useful for interactive exploration of your data.
    However, if you want to share the results of your notebooks with others (or keep them around for future reference), it may be better to embed them directly in the Jupyter/IPython notebook.
    
    To do that, switch to "inline" mode:
code 24
    %matplotlib inline
  metadata
    {
     "collapsed": false
    }
markdown
    From now on, all plots are shown directly below their code cells.
    
    But again, this doesn't import anything, you still have to import whatever you need:
code 25
    import matplotlib.pyplot as plt
  metadata
    {
     "collapsed": false
    }
code 26
    data = 4, 8, 15, 16, 23, 42
    fig, ax = plt.subplots()
    ax.plot(data);
  display_data
  - image/png
    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
    
  - text/plain
    <matplotlib.figure.Figure at 0x7fa3414602b0>
  metadata
    {
     "collapsed": false
    }
markdown
    Inline plots are saved within the notebook file (with the extension `.ipynb`).
    Therefore they can be viewed without a running IPython kernel, e.g. on http://nbviewer.ipython.org/ or http://nbviewer.jupyter.org/.
    
    You can switch back and forth between using a plot window and inline plotting:
code 27
    %matplotlib
  stream stdout
    Using matplotlib backend: TkAgg
  metadata
    {
     "collapsed": false
    }
markdown
    ## Advice: Write Your Own Plotting Function!
    
    You will most likely not just plot once and then move on.
    More realistically, you'll plot many times while exploring your data and changing some parameters in your calculations.
    
    Depending on the task at hand, you'll have certain requirements regarding axis scaling, tick marks, labels etc.
    
    Instead of repeating the same commands again and again, you should write an individualized plotting function.
    Here's an example:
code 28
    import matplotlib.pyplot as plt
    import numpy as np
    
    
    def myplot(data, ax=None):
        """A special plotting function for my special needs."""
        if ax is None:
            ax = plt.gca()
        x = np.arange(len(data)) * 1000  # my special x-axis needs
        lines = ax.plot(x, data)
        ax.set_xlabel("my independent variable / millisomethings")
        ax.set_ylabel("very interesting unitless values")
        ax.grid(True)
        return lines
  metadata
    {
     "collapsed": false
    }
markdown
    Note that this function accepts an optional `ax` argument (as recommended by the [official FAQ](http://matplotlib.org/faq/usage_faq.html#coding-styles)), where an existing `Axes` object can be passed to be drawn on.
    By default, the current `Axes` object is used.
    If none exists, a new figure with a new `Axes` object is created automatically.
    All this is done by [plt.gca()](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.gca) (= *get current axes*).
    
    You should think about what is most useful to be returned from this function, in this example it just passes through the list of lines returned by [plot()](http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.plot).
    
    Note that `show()` is not used within the function, as this might not be desired, e.g. if we only want to plot to a file and we don't want to show the plot window.
    
    The custom plotting function can be used like this:
code 29
    %matplotlib inline
  metadata
    {
     "collapsed": false
    }
code 30
    myplot([3, 2, 4, 1]);
  display_data
  - image/png
    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
    AABJRU5ErkJggg==
    
  - text/plain
    <matplotlib.figure.Figure at 0x7fa340db46d8>
  metadata
    {
     "collapsed": false
    }
markdown
    By means of the optional `ax` argument it can also be used in more complicated settings, e.g.:
code 31
    fig, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
    fig.set_figwidth(fig.get_figwidth() * 2)
    fig.subplots_adjust(wspace=0.06)
    myplot([3, 2, 4, 1], ax=ax1)
    myplot([2, 3, 1, 5, 4, 0], ax=ax2)
    ax2.set_ylabel('');
  display_data
  - image/png
    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
    
  - text/plain
    <matplotlib.figure.Figure at 0x7fa340def9b0>
  metadata
    {
     "collapsed": false
    }
markdown
    ## Finally: The Quick and Dirty Way
    
    The above examples are quite explicit (which is good) and a bit verbose (which might be tedious).
    
    If you just want to quickly fire up an IPython console and make some spontaneous throw-away plots, you can use the so-called "pylab" mode using [the "magic" command](http://ipython.org/ipython-doc/stable/interactive/magics.html#magic-pylab)
    
        %pylab
    
    or
    
        %pylab inline
        
    Like the command `%matplotlib` we used above, this switches to `matplotlib`'s interactive mode, but in addition it includes a whole lot of convenience functions into the current namespace.
    That means you don't need to write any `import` statements and you can use the functions without the `plt.` and `np.` prefixes, e.g.:
    
        plot(arange(100)**2)
    
    This should significantly reduce the number of characters you have to type (at least on the short term).
    However, this is not recommended if you want to keep your code, because the resulting code is hard to read for others (and for future you) and [it may cause some subtle errors](http://nbviewer.ipython.org/github/Carreau/posts/blob/master/10-No-PyLab-Thanks.ipynb).
markdown
    <p xmlns:dct="http://purl.org/dc/terms/">
      <a rel="license"
         href="http://creativecommons.org/publicdomain/zero/1.0/">
        <img src="http://i.creativecommons.org/p/zero/1.0/88x31.png" style="border-style: none;" alt="CC0" />
      </a>
      <br />
      To the extent possible under law,
      <span resource="[_:publisher]" rel="dct:publisher">
        <span property="dct:title">Matthias Geier</span></span>
      has waived all copyright and related or neighboring rights to
      this work.
    </p>
metadata
    {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.4.3+"
     }
    }
